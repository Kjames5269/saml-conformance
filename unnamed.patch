Index: idp/idp-web-sso/src/test/kotlin/org/codice/compliance/Common.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- idp/idp-web-sso/src/test/kotlin/org/codice/compliance/Common.kt	(date 1519318761000)
+++ idp/idp-web-sso/src/test/kotlin/org/codice/compliance/Common.kt	(date 1519322327000)
@@ -98,8 +98,8 @@
  */
 fun getIdpMetadata(): IDPSSODescriptor? {
     val idpMetadataParser = IdpMetadata()
-    val filePath = Paths.get(getResource("idp-metadata.xml").toURI()).toFile().path
-    idpMetadataParser.setMetadata(filePath)
+    val fileContent = SAMLComplianceException::class.java.getResource("/idp-metadata.xml").readText()
+    idpMetadataParser.setMetadata(fileContent)
     return idpMetadataParser.descriptor
 }
 
Index: security-common/src/main/java/org/codice/security/saml/IdpMetadata.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- security-common/src/main/java/org/codice/security/saml/IdpMetadata.java	(date 1519318761000)
+++ security-common/src/main/java/org/codice/security/saml/IdpMetadata.java	(date 1519322202000)
@@ -16,7 +16,6 @@
 import java.io.IOException;
 import java.time.Duration;
 import java.time.Instant;
-import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -224,8 +223,7 @@
     MetadataConfigurationParser metadataConfigurationParser;
     try {
       metadataConfigurationParser =
-          new MetadataConfigurationParser(
-              Collections.singletonList(metadata), ed -> processMap.put(ed.getEntityID(), ed));
+          new MetadataConfigurationParser(metadata, ed -> processMap.put(ed.getEntityID(), ed));
     } catch (IOException e) {
       LOGGER.debug("Error parsing SSO metadata", e);
       return null;
Index: security-common/src/main/java/org/codice/security/saml/MetadataConfigurationParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- security-common/src/main/java/org/codice/security/saml/MetadataConfigurationParser.java	(date 1519318761000)
+++ security-common/src/main/java/org/codice/security/saml/MetadataConfigurationParser.java	(date 1519322202000)
@@ -17,6 +17,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
+import java.io.StringReader;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -44,12 +45,11 @@
   private final Map<String, EntityDescriptor> entityDescriptorMap = new ConcurrentHashMap<>();
   private final Consumer<EntityDescriptor> updateCallback;
 
-  public MetadataConfigurationParser(List<String> entityDescriptions) throws IOException {
+  public MetadataConfigurationParser(String entityDescriptions) throws IOException {
     this(entityDescriptions, null);
   }
 
-  public MetadataConfigurationParser(
-      List<String> entityDescriptions, Consumer<EntityDescriptor> updateCallback)
+  public MetadataConfigurationParser(String entityDescriptions, Consumer<EntityDescriptor> updateCallback)
       throws IOException {
     this.updateCallback = updateCallback;
     buildEntityDescriptor(entityDescriptions);
@@ -62,25 +62,16 @@
   /**
    * Parses and builds an entity descriptor for metadatas.
    *
-   * @param filePaths - List of paths to metadata files
+   * @param entityDescription - metadata
    */
-  private void buildEntityDescriptor(List<String> filePaths) throws IOException {
-    for (String pathStr : filePaths) {
-      EntityDescriptor entityDescriptor = null;
-      pathStr = pathStr.trim();
-
-      Path path = Paths.get(pathStr);
-      if (Files.isReadable(path)) {
-        try (InputStream fileInputStream = Files.newInputStream(path)) {
-          entityDescriptor = readEntityDescriptor(new InputStreamReader(fileInputStream, "UTF-8"));
-        }
-      }
-
-      if (entityDescriptor != null) {
-        entityDescriptorMap.put(entityDescriptor.getEntityID(), entityDescriptor);
-        if (updateCallback != null) {
-          updateCallback.accept(entityDescriptor);
-        }
+  private void buildEntityDescriptor(String entityDescription) throws IOException {
+    EntityDescriptor entityDescriptor = null;
+    entityDescription = entityDescription.trim();
+    entityDescriptor = readEntityDescriptor(new StringReader(entityDescription));
+    if (entityDescriptor != null) {
+      entityDescriptorMap.put(entityDescriptor.getEntityID(), entityDescriptor);
+      if (updateCallback != null) {
+        updateCallback.accept(entityDescriptor);
       }
     }
   }
Index: security-common/src/main/java/org/codice/security/saml/SPMetadataParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- security-common/src/main/java/org/codice/security/saml/SPMetadataParser.java	(date 1519318761000)
+++ security-common/src/main/java/org/codice/security/saml/SPMetadataParser.java	(date 1519322202000)
@@ -1,86 +1,0 @@
-/**
- * Copyright (c) Codice Foundation
- *
- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU
- * Lesser General Public License as published by the Free Software Foundation, either version 3 of
- * the License, or any later version.
- *
- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public
- * License is distributed along with this program and can be found at
- * <http://www.gnu.org/licenses/lgpl.html>.
- */
-package org.codice.security.saml;
-
-import static java.util.Objects.nonNull;
-
-import com.google.common.collect.Maps;
-import java.io.IOException;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.stream.Collectors;
-import javax.annotation.Nullable;
-import org.codice.security.saml.SamlProtocol.Binding;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Non-instantiable class that provides a utility function to parse service provider metadata
- */
-public class SPMetadataParser {
-
-  private static final Logger LOGGER = LoggerFactory.getLogger(SPMetadataParser.class);
-
-  private SPMetadataParser() {
-  }
-
-  /**
-   * @param spMetadata Metadata from the service provider either as the xml itself, a url to a
-   * service that returns the xml, or the path to a file with the xml starting with file:
-   * @param bindingSet Set of supported bindings
-   * @return Map of the service providers entity id and the entity information
-   */
-  public static Map<String, EntityInformation> parse(
-      @Nullable List<String> spMetadata, Set<Binding> bindingSet) {
-    if (spMetadata == null) {
-      return Collections.emptyMap();
-    }
-
-    Map<String, EntityInformation> spMap = new HashMap<>();
-    try {
-      MetadataConfigurationParser metadataConfigurationParser =
-          new MetadataConfigurationParser(
-              spMetadata,
-              ed -> {
-                EntityInformation entityInfo =
-                    new EntityInformation.Builder(ed, bindingSet).build();
-                if (entityInfo != null) {
-                  spMap.put(ed.getEntityID(), entityInfo);
-                }
-              });
-
-      spMap.putAll(
-          metadataConfigurationParser
-              .getEntryDescriptions()
-              .entrySet()
-              .stream()
-              .map(
-                  e ->
-                      Maps.immutableEntry(
-                          e.getKey(),
-                          new EntityInformation.Builder(e.getValue(), bindingSet).build()))
-              .filter(e -> nonNull(e.getValue()))
-              .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
-
-    } catch (IOException e) {
-      LOGGER.warn(
-          "Unable to parse SP metadata configuration. Check the configuration for SP metadata.", e);
-    }
-
-    return spMap;
-  }
-}
Index: security-common/src/test/java/org/codice/security/saml/IdpMetadataTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- security-common/src/test/java/org/codice/security/saml/IdpMetadataTest.java	(date 1519318761000)
+++ security-common/src/test/java/org/codice/security/saml/IdpMetadataTest.java	(date 1519322254000)
@@ -1,42 +1,0 @@
-/**
- * Copyright (c) Codice Foundation
- *
- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU
- * Lesser General Public License as published by the Free Software Foundation, either version 3 of
- * the License, or any later version.
- *
- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public
- * License is distributed along with this program and can be found at
- * <http://www.gnu.org/licenses/lgpl.html>.
- */
-package org.codice.security.saml;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.notNullValue;
-import static org.junit.Assert.assertThat;
-
-import java.util.Map;
-import org.junit.Test;
-import org.opensaml.saml.saml2.metadata.EntityDescriptor;
-
-public class IdpMetadataTest {
-
-  private static final String IDP_ENTITY_ID = "https://localhost:8993/services/idp/login";
-
-  @Test
-  public void testParseSPMetadata() {
-    String metadataPath = this.getClass().getClassLoader().getResource("ddf-idp-metadata.xml").getPath();
-
-    IdpMetadata idpMetadata = new IdpMetadata();
-    idpMetadata.setMetadata(metadataPath);
-    Map<String, EntityDescriptor> metadata = idpMetadata.parseMetadata();
-
-    assertThat(metadata, is(notNullValue()));
-    assertThat(metadata.size(), is(1));
-
-    EntityDescriptor entityDescriptor = metadata.get(IDP_ENTITY_ID);
-    assertThat(entityDescriptor, is(notNullValue()));
-  }
-}
Index: security-common/src/test/java/org/codice/security/saml/SPMetadataParserTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- security-common/src/test/java/org/codice/security/saml/SPMetadataParserTest.java	(date 1519318761000)
+++ security-common/src/test/java/org/codice/security/saml/SPMetadataParserTest.java	(date 1519322202000)
@@ -1,41 +1,0 @@
-/**
- * Copyright (c) Codice Foundation
- *
- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU
- * Lesser General Public License as published by the Free Software Foundation, either version 3 of
- * the License, or any later version.
- *
- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public
- * License is distributed along with this program and can be found at
- * <http://www.gnu.org/licenses/lgpl.html>.
- */
-package org.codice.security.saml;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.CoreMatchers.notNullValue;
-import static org.junit.Assert.assertThat;
-
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
-import java.util.Map;
-import org.codice.security.saml.SamlProtocol.Binding;
-import org.junit.Test;
-
-public class SPMetadataParserTest {
-
-  private static final String SP_ENTITY_ID = "https://localhost:8993/services/saml";
-
-  @Test
-  public void testParseSPMetadata() {
-    String metadataPath = this.getClass().getClassLoader().getResource("ddf-sp-metadata.xml").getPath();
-    Map<String, EntityInformation> spMetadata = SPMetadataParser.parse(ImmutableList.of(metadataPath), ImmutableSet.of(Binding.HTTP_REDIRECT, Binding.HTTP_POST));
-
-    assertThat(spMetadata, is(notNullValue()));
-    assertThat(spMetadata.size(), is(1));
-
-    EntityInformation entityInformation = spMetadata.get(SP_ENTITY_ID);
-    assertThat(entityInformation, is(notNullValue()));
-  }
-}
Index: security-common/src/test/java/org/codice/security/sign/SystemCryptoTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- security-common/src/test/java/org/codice/security/sign/SystemCryptoTest.java	(date 1519318761000)
+++ security-common/src/test/java/org/codice/security/sign/SystemCryptoTest.java	(date 1519322239000)
@@ -1,40 +1,0 @@
-/**
- * Copyright (c) Codice Foundation
- *
- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU
- * Lesser General Public License as published by the Free Software Foundation, either version 3 of
- * the License, or any later version.
- *
- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public
- * License is distributed along with this program and can be found at
- * <http://www.gnu.org/licenses/lgpl.html>.
- */
-package org.codice.security.sign;
-
-import static org.hamcrest.CoreMatchers.notNullValue;
-import static org.junit.Assert.assertThat;
-import static org.hamcrest.CoreMatchers.is;
-
-import java.io.IOException;
-import org.junit.Test;
-
-public class SystemCryptoTest {
-
-  private static final String HOSTNAME = "localhost";
-  private static final String PASS = "changeit";
-
-  @Test
-  public void testCreateSystemCrypto() throws IOException {
-    SystemCrypto crypto = new SystemCrypto();
-
-    assertThat(crypto.getEncryptionAlias(), is(HOSTNAME));
-    assertThat(crypto.getEncryptionPassword(), is(PASS));
-    assertThat(crypto.getEncryptionCrypto(), is(notNullValue()));
-
-    assertThat(crypto.getSignatureAlias(), is(HOSTNAME));
-    assertThat(crypto.getSignaturePassword(), is(PASS));
-    assertThat(crypto.getSignatureCrypto(), is(notNullValue()));
-    }
-}
